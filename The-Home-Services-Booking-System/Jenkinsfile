pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "chamaravishwajith644/spring-boot-app:latest"
        DOCKER_CREDENTIALS_ID = "dockerhub-credentials"
        SSH_CREDENTIALS_ID = "homemate-dev-server"
        SSH_TARGET = "ubuntu@16.170.174.241"
        DOCKER_CONTAINER = "spring-boot-app"
        REACT_APP_IMAGE = "chamaravishwajith644/react-frontend:latest"
    }

    tools {
        maven 'Maven 3.9.9'

    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/RMCV-Rajapaksha/The-Home-Services-Booking-System.git'
            }
        }

        stage('Build Backend Application') {
            steps {
                sh 'cd The-Home-Services-Booking-System && mvn clean package'
            }
        }

        stage('Run Backend Tests') {
            steps {
                script {
                    sh '''
                    echo "Running application tests"
                    cd The-Home-Services-Booking-System
                    mvn test -DskipTests=false || true
                    ls -l target/surefire-reports/
                    cat target/surefire-reports/*.xml || true
                    '''
                }
            }
        }


        stage('Configure Server with Ansible') {
                    steps {
                        script {
                            sshagent([SSH_CREDENTIALS_ID]) {
                                sh '''
                                pwd
                                ls
                                cd Codes/Ansible
                                ls

                                # Copy both files to the remote server
                                scp docker-master-setup.yaml $SSH_TARGET:/tmp/docker-master-setup.yaml
                                scp mevan-master-setup.yaml $SSH_TARGET:/tmp/mevan-master-setup.yaml

                                # Execute both playbooks on the server
                                ssh -o StrictHostKeyChecking=no $SSH_TARGET "ansible-playbook /tmp/docker-master-setup.yaml --connection=local"
                                ssh -o StrictHostKeyChecking=no $SSH_TARGET "ansible-playbook /tmp/mevan-master-setup.yaml --connection=local"
                                '''
                            }
                        }
                    }
                }

 stage('Terraform  Stage') {
            steps {
                script {
                    sh '''
                    echo "Initializing Terraform..."

                    echo "Applying Terraform (dummy run)..."
                    
                    '''
                }
            }
        }



        stage('Build & Push Backend Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker build -t $DOCKER_IMAGE -f The-Home-Services-Booking-System/Dockerfile The-Home-Services-Booking-System
                        docker push $DOCKER_IMAGE
                        docker logout
                        '''
                    }
                }
            }
        }

        stage('Build & Push Frontend Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        # Build the React frontend Docker image
                        docker build -t $REACT_APP_IMAGE -f frontend/Dockerfile frontend
                        # Push the Docker image to DockerHub
                        docker push $REACT_APP_IMAGE
                        docker logout
                        '''
                    }
                }
            }
        }


        stage('Deploy Backend Application') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh '''
                        ssh -T -o StrictHostKeyChecking=no $SSH_TARGET <<EOF
                        set -xe  # Enables debugging
                        docker pull $DOCKER_IMAGE
                        docker ps -q --filter "name=$DOCKER_CONTAINER" | grep -q . && docker stop $DOCKER_CONTAINER || true
                        docker ps -aq --filter "name=$DOCKER_CONTAINER" | grep -q . && docker rm $DOCKER_CONTAINER || true
                        docker run -d --restart always --name $DOCKER_CONTAINER -p 8080:8080 $DOCKER_IMAGE
                        docker logout
                        '''
                    }
                }
            }
        }

        stage('Deploy Frontend Application') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh '''
                        # Assuming your frontend app is hosted with Nginx on the server
                        ssh -T -o StrictHostKeyChecking=no $SSH_TARGET <<EOF
                        set -xe  # Enables debugging
                        docker pull $REACT_APP_IMAGE
                        docker ps -q --filter "name=react-frontend" | grep -q . && docker stop react-frontend || true
                        docker ps -aq --filter "name=react-frontend" | grep -q . && docker rm react-frontend || true
                        docker run -d --restart always --name react-frontend -p 3000:3000 $REACT_APP_IMAGE
                        docker logout
                        '''
                    }
                }
            }
        }

    }

  post {
      always {
          junit 'The-Home-Services-Booking-System/target/surefire-reports/TEST-*.xml'
          plot csvFileName: 'test-duration.csv',
              title: 'Test Execution Time',
              group: 'Test Metrics',
              style: 'line'
          cleanWs()
      }

      success {
          emailext(
              to: 'sch.chamara@gmail.com',
              subject: "‚úÖ SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' Completed Successfully",
              body: """
              <html>
                  <body style="font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333;">
                      <div style="max-width: 800px; margin: 0 auto; padding: 20px; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                          <h2 style="color: green;">üéâ Build Successful! üéâ</h2>
                          <p style="font-size: 16px;">The job <b>${env.JOB_NAME}</b> build <b>#${env.BUILD_NUMBER}</b> has completed successfully.</p>

                          <h3 style="color: #4682B4;">üîπ Build Details</h3>
                          <table border="1" cellspacing="0" cellpadding="8" style="border-collapse: collapse; width: 100%; margin-bottom: 20px;">
                              <thead>
                                  <tr style="background-color: #dff0d8; color: #3c763d;">
                                      <th>Detail</th><th>Value</th>
                                  </tr>
                              </thead>
                              <tbody>
                                  <tr><td><b>Job Name</b></td><td>${env.JOB_NAME}</td></tr>
                                  <tr><td><b>Build Number</b></td><td>${env.BUILD_NUMBER}</td></tr>
                                  <tr><td><b>Build Status</b></td><td style="color: green;"><b>SUCCESS ‚úÖ</b></td></tr>
                                  <tr><td><b>Duration</b></td><td>${currentBuild.durationString}</td></tr>
                                  <tr><td><b>Build URL</b></td><td><a href="${env.BUILD_URL}" style="color: #007bff;">${env.BUILD_URL}</a></td></tr>
                              </tbody>
                          </table>

                          <h3 style="color: #4682B4;">üìä Test Results</h3>
                          <p style="font-size: 16px;">For detailed test reports, please check Jenkins.</p>

                          <h4 style="color: #8A2BE2;">üöÄ Deployment was successful!</h4>
                          <p style="font-size: 16px;">Your application is now live and running smoothly!</p>

                          <div style="text-align: center; margin-top: 30px;">
                              <p style="font-size: 14px; color: #777;">Thank you for using our CI/CD pipeline. If you have any questions, feel free to reach out.</p>
                          </div>
                      </div>
                  </body>
              </html>
              """,
              mimeType: 'text/html',
              replyTo: 'sch.chamara@gmail.com',
              from: 'sch.chamara@gmail.com'
          )
      }

      failure {
          emailext(
              to: 'sch.chamara@gmail.com',
              subject: "‚ùå FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' Failed",
              body: """
              <html>
                  <body style="font-family: Arial, sans-serif; background-color: #f9f9f9; color: #333;">
                      <div style="max-width: 800px; margin: 0 auto; padding: 20px; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                          <h2 style="color: red;">‚ö†Ô∏è Build Failed! ‚ö†Ô∏è</h2>
                          <p style="font-size: 16px;">The job <b>${env.JOB_NAME}</b> build <b>#${env.BUILD_NUMBER}</b> has failed.</p>

                          <h3 style="color: #FF4500;">üî¥ Build Details</h3>
                          <table border="1" cellspacing="0" cellpadding="8" style="border-collapse: collapse; width: 100%; margin-bottom: 20px;">
                              <thead>
                                  <tr style="background-color: #f2dede; color: #a94442;">
                                      <th>Detail</th><th>Value</th>
                                  </tr>
                              </thead>
                              <tbody>
                                  <tr><td><b>Job Name</b></td><td>${env.JOB_NAME}</td></tr>
                                  <tr><td><b>Build Number</b></td><td>${env.BUILD_NUMBER}</td></tr>
                                  <tr><td><b>Build Status</b></td><td style="color: red;"><b>FAILURE ‚ùå</b></td></tr>
                                  <tr><td><b>Duration</b></td><td>${currentBuild.durationString}</td></tr>
                                  <tr><td><b>Build URL</b></td><td><a href="${env.BUILD_URL}" style="color: #007bff;">${env.BUILD_URL}</a></td></tr>
                              </tbody>
                          </table>

                          <h3 style="color: #FF6347;">üîé Possible Causes:</h3>
                          <ul style="font-size: 16px; margin-left: 20px;">
                              <li>Check the console output for errors.</li>
                              <li>Verify Docker image build and push steps.</li>
                              <li>Check test failures in the reports.</li>
                              <li>Confirm SSH connection to the deployment server.</li>
                          </ul>

                          <h4 style="color: #B22222;">üõ†Ô∏è Immediate Action Required!</h4>
                          <p style="font-size: 16px;">Click the build URL above to investigate further and resolve the issue.</p>

                          <div style="text-align: center; margin-top: 30px;">
                              <p style="font-size: 14px; color: #777;">For assistance, please contact the DevOps team.</p>
                          </div>
                      </div>
                  </body>
              </html>
              """,
              mimeType: 'text/html',
              replyTo: 'sch.chamara@gmail.com',
              from: 'sch.chamara@gmail.com'
          )
      }
  }
}