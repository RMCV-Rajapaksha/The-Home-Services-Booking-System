pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = "dockerhub-credentials"
        SSH_CREDENTIALS_ID = "homemate-dev-server"
        SSH_TARGET = "ubuntu@16.170.174.241"
        FRONTEND_REACT_APP_IMAGE = "chamaravishwajith644/react-frontend"
        BACKEND_DOCKER_IMAGE = "chamaravishwajith644/spring-boot-app"
        VERSION = '1.0.0'  // Use Git tag for versioning
    }

    tools {
        maven 'Maven 3.9.9'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/RMCV-Rajapaksha/The-Home-Services-Booking-System.git'
            }
        }

        stage('Build Backend Application') {
            steps {
                sh 'cd The-Home-Services-Booking-System && mvn clean package'
            }
        }

        stage('Run Backend Tests') {
            steps {
                script {
                    sh '''
                    echo "Running application tests"
                    cd The-Home-Services-Booking-System
                    mvn test -DskipTests=false || true
                    ls -l target/surefire-reports/
                    cat target/surefire-reports/*.xml || true
                    '''
                }
            }
        }

        stage('Build & Push Backend Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker build -t $BACKEND_DOCKER_IMAGE:$VERSION -f The-Home-Services-Booking-System/Dockerfile The-Home-Services-Booking-System
                        docker push $BACKEND_DOCKER_IMAGE:$VERSION
                        docker logout
                        '''
                    }
                }
            }
        }

        stage('Build & Push Frontend Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        # Build the React frontend Docker image with version tagging
                        docker build --no-cache -t $FRONTEND_REACT_APP_IMAGE:$VERSION -f frontend/Dockerfile frontend
                        # Push the Docker image to DockerHub with version
                        docker push $FRONTEND_REACT_APP_IMAGE:$VERSION
                        docker logout
                        '''
                    }
                }
            }
        }

        stage('Deploy Backend Application') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh '''
                        ssh -T -o StrictHostKeyChecking=no $SSH_TARGET <<EOF
                        set -xe  # Enables debugging

                        # Ensure the Docker network exists
                        docker network inspect homemate-network >/dev/null 2>&1 || docker network create homemate-network

                        # Pull the latest versioned backend image
                        docker pull $BACKEND_DOCKER_IMAGE:$VERSION

                        # Stop and remove existing container if running
                        docker ps -q --filter "name=spring-boot-app" | grep -q . && docker stop spring-boot-app || true
                        docker ps -aq --filter "name=spring-boot-app" | grep -q . && docker rm spring-boot-app || true

                        # Run the container with the versioned image
                        docker run -d --restart always --name spring-boot-app --network homemate-network -p 8080:8080 $BACKEND_DOCKER_IMAGE:$VERSION

                        docker logout
                        '''
                    }
                }
            }
        }

        stage('Deploy Frontend Application') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS_ID]) {
                        sh '''
                        ssh -T -o StrictHostKeyChecking=no $SSH_TARGET <<EOF
                        set -xe  # Enables debugging

                        # Ensure the Docker network exists
                        docker network inspect homemate-network >/dev/null 2>&1 || docker network create homemate-network

                        # Pull the latest versioned frontend image
                        docker pull $FRONTEND_REACT_APP_IMAGE:$VERSION

                        # Stop and remove any running instance of the frontend
                        docker ps -q --filter "name=react-frontend" | grep -q . && docker stop react-frontend || true
                        docker ps -aq --filter "name=react-frontend" | grep -q . && docker rm react-frontend || true

                        # Run the container with the versioned image
                        docker run --pull=always -d --restart always --name react-frontend --network homemate-network -p 3000:3000 $FRONTEND_REACT_APP_IMAGE:$VERSION

                        docker logout
                        '''
                    }
                }
            }
        }

    }

    post {
        always {
            junit 'The-Home-Services-Booking-System/target/surefire-reports/TEST-*.xml'
            cleanWs()
        }

        success {
            emailext(
                to: 'sch.chamara@gmail.com',
                subject: "✅ SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' Completed Successfully",
                body: "Build and deployment successful for version $VERSION.",
                mimeType: 'text/html',
                replyTo: 'sch.chamara@gmail.com',
                from: 'sch.chamara@gmail.com'
            )
        }

        failure {
            emailext(
                to: 'sch.chamara@gmail.com',
                subject: "❌ FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' Failed",
                body: "Build and deployment failed for version $VERSION. Check Jenkins logs for details.",
                mimeType: 'text/html',
                replyTo: 'sch.chamara@gmail.com',
                from: 'sch.chamara@gmail.com'
            )
        }
    }
}
