pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "chamaravishwajith644/spring-boot-app:latest"
        DOCKER_CREDENTIALS_ID = "dockerhub-credentials"
        SSH_CREDENTIALS_ID = "homemate-dev-server"
        SSH_TARGET = "ubuntu@16.170.174.241"
        DOCKER_CONTAINER = "spring-boot-app"
        REACT_APP_IMAGE = "chamaravishwajith644/react-frontend:latest"
    }

    tools {
        maven 'Maven 3.9.9'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                }
                git branch: 'main', url: 'https://github.com/RMCV-Rajapaksha/The-Home-Services-Booking-System.git'
                script {
                    writeFile file: 'stage-duration.csv', text: "Stage,Duration (ms)\n"
                    endTime = System.currentTimeMillis()
                    writeFile file: 'stage-duration.csv', text: "Checkout Code,${endTime - startTime}\n", append: true
                }
            }
        }

        stage('Build Backend Application') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                }
                sh 'cd The-Home-Services-Booking-System && mvn clean package'
                script {
                    endTime = System.currentTimeMillis()
                    writeFile file: 'stage-duration.csv', text: "Build Backend Application,${endTime - startTime}\n", append: true
                }
            }
        }

        stage('Run Backend Tests') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                }
                sh '''
                echo "Running application tests"
                cd The-Home-Services-Booking-System
                mvn test -DskipTests=false || true
                ls -l target/surefire-reports/
                cat target/surefire-reports/*.xml || true
                '''
                script {
                    endTime = System.currentTimeMillis()
                    writeFile file: 'stage-duration.csv', text: "Run Backend Tests,${endTime - startTime}\n", append: true
                }
            }
        }

        stage('Build & Push Backend Docker Image') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                }
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker build -t $DOCKER_IMAGE -f The-Home-Services-Booking-System/Dockerfile The-Home-Services-Booking-System
                    docker push $DOCKER_IMAGE
                    docker logout
                    '''
                }
                script {
                    endTime = System.currentTimeMillis()
                    writeFile file: 'stage-duration.csv', text: "Build & Push Backend Docker Image,${endTime - startTime}\n", append: true
                }
            }
        }

        stage('Build & Push Frontend Docker Image') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                }
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                    docker build --no-cache -t $REACT_APP_IMAGE -f frontend/Dockerfile frontend
                    docker push $REACT_APP_IMAGE
                    docker logout
                    '''
                }
                script {
                    endTime = System.currentTimeMillis()
                    writeFile file: 'stage-duration.csv', text: "Build & Push Frontend Docker Image,${endTime - startTime}\n", append: true
                }
            }
        }
    }

    post {
        always {
            // Publish JUnit Test Report
            junit '**/target/surefire-reports/TEST-*.xml'

            // Plot Graph for Test Execution Time
            plot csvFileName: 'test-duration.csv',
                title: 'Test Execution Time',
                group: 'Test Metrics',
                style: 'line',
                yaxis: 'Time (ms)'

            // Plot Graph for Pipeline Execution Time
            plot csvFileName: 'stage-duration.csv',
                title: 'Pipeline Execution Time per Stage',
                group: 'Pipeline Metrics',
                style: 'bar',
                yaxis: 'Time (ms)'

            cleanWs()
        }

        success {
            emailext(
                to: 'sch.chamara@gmail.com',
                subject: "✅ SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' Completed Successfully",
                body: "The pipeline execution was successful.\n\nVisit: ${env.BUILD_URL}\n",
                attachLog: true
            )
        }

        failure {
            emailext(
                to: 'sch.chamara@gmail.com',
                subject: "❌ FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' Failed",
                body: "The pipeline execution has failed. Please check the logs.\n\nVisit: ${env.BUILD_URL}\n",
                attachLog: true
            )
        }
    }
}
