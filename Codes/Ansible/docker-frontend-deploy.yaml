---
- name: Deploy Frontend Application
  hosts: localhost
  vars:
    REACT_APP_IMAGE: "chamaravishwajith644/react-frontend:latest"
    DOCKER_CONTAINER: "react-frontend"
    DOCKER_NETWORK: "homemate-network"
    CONTAINER_PORT: "3000"
    HOST_PORT: "3000"
  
  tasks:
    - name: Ensure Docker is installed
      shell: docker --version
      register: docker_version_check
      ignore_errors: yes
      
    - name: Fail if Docker is not installed
      fail: 
        msg: "Docker is not installed or not functioning properly"
      when: docker_version_check.rc != 0
      
    - name: Check if Docker network exists
      shell: docker network inspect {{ DOCKER_NETWORK }} 2>/dev/null || echo "Network not found"
      register: network_check
      changed_when: false
      
    - name: Create Docker network if it does not exist
      shell: docker network create {{ DOCKER_NETWORK }}
      when: network_check.stdout.find('Network not found') != -1
      
    - name: Pull the latest Docker image for Frontend
      shell: docker pull {{ REACT_APP_IMAGE }}
      register: pull_result
      changed_when: pull_result.stdout.find('Downloaded newer image') != -1 or pull_result.stdout.find('Image is up to date') != -1
      
    - name: Stop any running instance of the frontend container
      shell: docker stop {{ DOCKER_CONTAINER }} || true
      ignore_errors: yes
      
    - name: Remove old frontend container
      shell: docker rm {{ DOCKER_CONTAINER }} || true
      ignore_errors: yes
      
    - name: Run frontend container
      shell: >
        docker run -d 
        --restart always 
        --name {{ DOCKER_CONTAINER }} 
        --network {{ DOCKER_NETWORK }} 
        -p {{ HOST_PORT }}:{{ CONTAINER_PORT }} 
        {{ REACT_APP_IMAGE }}
      register: container_start
      
    - name: Verify container is running
      shell: docker ps -f "name={{ DOCKER_CONTAINER }}" --format "{{.Status}}" | grep Up
      register: container_status
      ignore_errors: yes
      changed_when: false
      
    - name: Show container status
      debug:
        msg: "Container status: {{ container_status.stdout }}"
      when: container_status.rc == 0
      
    - name: Show error if container failed to start
      debug:
        msg: "WARNING: Container failed to start properly. Check Docker logs."
      when: container_status.rc != 0